package tk.lucasapps.omdb.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE".
*/
public class MovieDao extends AbstractDao<Movie, Long> {

    public static final String TABLENAME = "MOVIE";

    /**
     * Properties of entity Movie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Poster = new Property(1, String.class, "Poster", false, "POSTER");
        public final static Property ImdbID = new Property(2, String.class, "imdbID", false, "IMDB_ID");
        public final static Property Title = new Property(3, String.class, "Title", false, "TITLE");
        public final static Property Year = new Property(4, String.class, "Year", false, "YEAR");
        public final static Property Watched = new Property(5, boolean.class, "watched", false, "WATCHED");
        public final static Property Pending = new Property(6, boolean.class, "pending", false, "PENDING");
    }


    public MovieDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"POSTER\" TEXT," + // 1: Poster
                "\"IMDB_ID\" TEXT," + // 2: imdbID
                "\"TITLE\" TEXT," + // 3: Title
                "\"YEAR\" TEXT," + // 4: Year
                "\"WATCHED\" INTEGER NOT NULL ," + // 5: watched
                "\"PENDING\" INTEGER NOT NULL );"); // 6: pending
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MOVIE_IMDB_ID ON \"MOVIE\"" +
                " (\"IMDB_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MOVIE_WATCHED ON \"MOVIE\"" +
                " (\"WATCHED\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MOVIE_PENDING ON \"MOVIE\"" +
                " (\"PENDING\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Movie entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Poster = entity.getPoster();
        if (Poster != null) {
            stmt.bindString(2, Poster);
        }
 
        String imdbID = entity.getImdbID();
        if (imdbID != null) {
            stmt.bindString(3, imdbID);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(4, Title);
        }
 
        String Year = entity.getYear();
        if (Year != null) {
            stmt.bindString(5, Year);
        }
        stmt.bindLong(6, entity.getWatched() ? 1L: 0L);
        stmt.bindLong(7, entity.getPending() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Movie entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Poster = entity.getPoster();
        if (Poster != null) {
            stmt.bindString(2, Poster);
        }
 
        String imdbID = entity.getImdbID();
        if (imdbID != null) {
            stmt.bindString(3, imdbID);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(4, Title);
        }
 
        String Year = entity.getYear();
        if (Year != null) {
            stmt.bindString(5, Year);
        }
        stmt.bindLong(6, entity.getWatched() ? 1L: 0L);
        stmt.bindLong(7, entity.getPending() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Movie readEntity(Cursor cursor, int offset) {
        Movie entity = new Movie( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Poster
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imdbID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Year
            cursor.getShort(offset + 5) != 0, // watched
            cursor.getShort(offset + 6) != 0 // pending
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Movie entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoster(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImdbID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYear(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWatched(cursor.getShort(offset + 5) != 0);
        entity.setPending(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Movie entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Movie entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Movie entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
